
//*********************************************************************
// Define dependencies of plugins.
//*********************************************************************
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")

        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")

        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('net.researchgate:gradle-release:2.3.4')
        
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2"
    }
}
plugins {
    id "org.sonarqube" version "1.1"
}

//*********************************************************************
// Import common dependency groups.
//*********************************************************************
apply from: 'libraries.gradle'

//*********************************************************************
// Release plugin only applied to root - Will only build root
// but dependecy update subs will change versions in other projects
//*********************************************************************
apply plugin: 'net.researchgate.release'

task(updateSubs) << {
  def versionToBeUpdated
  def updatedCompose
  FileTree dockerComposeTree = fileTree(dir: project.projectDir, includes: ["**/docker-compose*.yml"])
  dockerComposeTree.each {File dockerComposeFile ->
    if (project.version.contains('SNAPSHOT')) {
      versionToBeUpdated=tagVersion
      updatedCompose = dockerComposeFile.text.replaceAll(/(image:[^:]*)(:$tagVersion)/,"\$1:latest")
    } else {
      versionToBeUpdated=prereleaseVersion
      updatedCompose = dockerComposeFile.text.replaceAll(/(image:[^:]*)(:latest)/,"\$1:$project.version")
    }
    dockerComposeFile.write(updatedCompose)
  }
  FileTree tree = fileTree(dir: project.projectDir, includes: ["**/Dockerfile"])
  tree.each {File file ->
    if (file.text.contains(versionToBeUpdated)) {
      def updated = file.text.replaceAll(versionToBeUpdated,project.version)
      file.write(updated)
    }
  }
  File gradleProperties = file("${project.projectDir}/gradle.properties");
  if (gradleProperties.text.contains(versionToBeUpdated)) {
    def updated = gradleProperties.text.replaceAll(/(venneticsMicroServicesCommonVersion = )($versionToBeUpdated)/,"\$1${project.version}")
    gradleProperties.write(updated)
   }
}

//*********************************************************************
// Update SNAPSHOT to release version
//*********************************************************************
beforeReleaseBuild.dependsOn updateSubs
//*********************************************************************
// Update release to new SNAPSHOT version
//*********************************************************************
commitNewVersion.dependsOn updateSubs

release {
  tagTemplate = '$version'
  failOnSnapshotDependencies = false
}

//*********************************************************************
// Sonarqube is only applied to the root project.
// Password should be set in personal user properties
// e.g. sonarPassword=MyPassword
//*********************************************************************
apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarqube.vennetics.com/"
        property "sonar.login", "VenneticsDev"
        property "sonar.password", sonarPassword
        property "sonar.projectKey", "com.vennetics:bell-sam"
        property "sonar.projectName", "Bell Service API Mediation"
    }
}

//*********************************************************************
// Multi-project setup applicable to all projects including the root.
//*********************************************************************
allprojects {

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    jar { onlyIf { project.name != rootProject.name } }

    apply plugin: 'io.spring.dependency-management'


    dependencyManagement {
        dependencies {
            dependency "junit:junit:${junitVersion}"
            dependency "commons-io:commons-io:${commonsIOVersion}"
            dependency "com.cloudhopper:ch-smpp:${chSmppVersion}"
            dependency "com.googlecode.libphonenumber:libphonenumber:${libPhoneNumberVersion}"
            dependency "com.jayway.jsonpath:json-path:${jaywayJsonPathVersion}"
            dependency "com.netflix.rxjava:rxjava-core:${rxJavaVersion}"
            dependency "com.netflix.hystrix:hystrix-core:${hystrixVersion}"
            dependency "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxb2BasicsVersion}"
            dependency "de.codecentric:spring-boot-admin-server:${springAdminServerVersion}"
            dependency "de.codecentric:spring-boot-admin-server-ui:${springAdminServerUiVersion}"
            dependency "org.jolokia:jolokia-core:${jolokiaCoreVersion}"
            dependency "org.reflections:reflections:${reflectionsVersion}"
            dependency "org.apache.commons:commons-lang3:${commonsLang3Version}"
            dependency "org.springframework.restdocs:spring-restdocs-mockmvc:${springRestdocsVersion}"
            dependency "com.jamonapi:jamon:${jamonVersion}"
            
            // Our modules from microservices common.
            dependency "com.vennetics.microservices.common:spring-boot-starter-core-logging:${venneticsMicroServicesCommonVersion}"
            dependency "com.vennetics.microservices.common:spring-boot-starter-core-hystrix:${venneticsMicroServicesCommonVersion}"
            
            // For faster log4j async
            dependency "com.lmax:disruptor:${lmaxDisruptorVersion}"
        }
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentBomVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/repo" }
        maven {
            url "s3://mvn.vennetics.com/releases"
            credentials(AwsCredentials) {
                accessKey vennetics_s3_access_key
                secretKey vennetics_s3_access_secret
            }
        }
    }

    group = 'com.vennetics.bell.sam'

    checkstyle {
        configFile = file("$rootProject.projectDir/codequality/vennetics-checkstle-config.xml")
        reportsDir = file("$project.buildDir/checkstyle")
    }

    pmd {
        ruleSetFiles = files("$rootProject.projectDir/codequality/vennetics-pmd-rules.xml")
        reportsDir = file("$project.buildDir/pmd")
    }

    findbugs {
        excludeFilter = file("$rootProject.projectDir/codequality/vennetics-findbugs-exclude.xml")
        effort = "max"
        reportLevel = "medium"
        reportsDir = file("$project.buildDir/findbugs")
        toolVersion = '3.0.0'
    }
}

//*********************************************************************
// Applicable to sub-projects but not the root project
//*********************************************************************
subprojects {

    apply plugin: 'docker'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    
    configurations {
        // Exclude Logback which is default in *-starter-*
        all*.exclude module : 'spring-boot-starter-logging'
        // Make sure logback not pulled in by anything else (e.g. cassandra)
        all*.exclude module : 'logback-core'
        all*.exclude module : 'logback-classic'
    }

    dependencies {
        
        // Autowires our spring-boot-common project into any projects that are spring-boot applications.
        // Might be a better way to pick these out but this should work.
        if(new File("${project.projectDir}/src/main/resources/bootstrap.yml").exists()
            || new File("${project.projectDir}/src/main/resources/application.yml").exists()) {
                runtime "com.vennetics.microservices.common:spring-boot-common:${venneticsMicroServicesCommonVersion}"   
        }
        
        if (!project.name.equals("core-logging-config")) {
            compile project(':core-logging-config')
            
            // From microservices-common repository
            // Add our logging starter to the project.
            // Would be better to do this only for spring-boot projects.
            // But not spring-boot projects will ingore the auto-config anyway.
            // Version set in upper dependencies
            compile ('com.vennetics.microservices.common:spring-boot-starter-core-logging')
            compile ('com.vennetics.microservices.common:spring-boot-starter-core-hystrix')
            
            // Make sure log4j2-test.xml is on the testCompile classpath
            // during all test runs.            
            testCompile files(project(':core-logging-config').sourceSets.test.output.resourcesDir)
        }

        compile libraries.slf4j
        
        // Add scala plugin and gatling dependencies if project has a test/scala folder
        if(new File("${project.projectDir}/src/test/scala").exists()) {
            //println "Applying war config to project: " + project.name
            configure(project) {
                apply plugin: 'scala'
            }
            testCompile "io.gatling:gatling-app:${gatlingVersion}"
            testCompile "io.gatling.highcharts:gatling-charts-highcharts:${gatlingVersion}"
            testCompile "org.scala-lang:scala-library:${scalaVersion}"

        }
        
        testCompile libraries.unitTest

    }

    jar {
        manifest {
            attributes("Implementation-Title": "Vennetics",
            "Implementation-Version": jar.version)
        }
    }

    jar.doLast { task ->
        ant.checksum file: task.archivePath
    }

    //*****************************************************************
    // Jacoco configuration.
    //*****************************************************************

    jacoco {
        toolVersion jacocoToolVersion
        reportsDir = file("$project.buildDir/jacoco")
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
            //html.destination "${buildDir}/jacocoHtml"
            csv.destination "${buildDir}/jacocoCsv"
            xml.destination "${buildDir}/jacocoXml"
        }
    }
    
    sonarqube {
        properties {
            property "sonar.jacoco.reportPath", "$buildDir/jacoco/jacocoUnitTest.exec"
            property "sonar.jacoco.itReportPath", "$buildDir/jacoco/jacocoIntegrationTest.exec"
        }
    }

    //*****************************************************************
    // Any failing test will terminate the build, unless --continue
    // option specified.
    //*****************************************************************

    tasks.withType(Test) {
        ignoreFailures = gradle.startParameter.continueOnFailure
    }

    tasks.withType(FindBugs) {
        ignoreFailures = gradle.startParameter.continueOnFailure
        
        if (!project.hasProperty("htmlReport")) {
            ext.htmlReport = "false"
        }
        reports {
            html.enabled = "$htmlReport".toBoolean()
            xml.enabled = !html.enabled
        }
    }

    tasks.withType(Checkstyle) {
        ignoreFailures = gradle.startParameter.continueOnFailure
    }

    tasks.withType(Pmd) {
        ignoreFailures = gradle.startParameter.continueOnFailure
    }

    //*****************************************************************
    // Unit Test configuration.
    //*****************************************************************
    test {
        useJUnit { 
            excludeCategories 'com.vennetics.shared.test.utils.categories.IntegrationTest'
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoUnitTest.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps/unit")
        }
        enableAssertions = false
        jvmArgs += ["-XX:+HeapDumpOnOutOfMemoryError"]
    }

    //*****************************************************************
    // Integration Test configuration.
    //*****************************************************************

    task integrationTest(type: Test) {
        description 'Run the suite of Junit tests annotated with @Category(IntegrationTest)'
        useJUnit { 
            includeCategories 'com.vennetics.shared.test.utils.categories.IntegrationTest'
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps/integration")
        }
        enableAssertions = false
        jvmArgs += ["-XX:+HeapDumpOnOutOfMemoryError"]
    }

    if (new File("${project.projectDir}/src/test/scala").exists()) {
    task gatlingTests(type: Test) {
        dependsOn testClasses
        doFirst {
            description = "Run Gatling Tests"
            def collection
            if (project.hasProperty('gatlingTest')) {
                def file = new File("${project.projectDir}/src/test/scala/${gatlingTest}.scala")
                if (file.exists()) {
                    collection = files("${project.projectDir}/src/test/scala/${gatlingTest}.scala")
                } else {
                    throw new GradleException("No gatling test $gatlingTest");
                }
            } else {
                collection = fileTree(dir: "${project.projectDir}/src/test/scala", include: "**/*Simulation.scala", exclude: "**/Abstract*")
            }
            collection.each { file ->
                def scalaClassName = file.name.replace(".scala", "")
                javaexec {
                    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
                    jvmArgs = [ "-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}" ]
                    systemProperties System.getProperties()
                    main = "io.gatling.app.Gatling"
                    args = [
                            "--simulation", "com.vennetics.scala.test.simulations.$scalaClassName",
                            "--results-folder", "${buildDir}/reports/gatling-results",
                            "--data-folder", "${project.projectDir}/src/test/scala/",
                            "--bodies-folder", "${project.projectDir}/src/test/scala/"
                    ]
                }
            }
        }
    }
    }

    //*****************************************************************
    // Docker configuration.
    //*****************************************************************

    if (new File("${project.projectDir}/src/main/docker").exists()) {
        task buildDocker(type: Docker, dependsOn: build) {
            description "Builds a docker image for any project that contains a docker definition file. \n" +
                "   By default this will not push the image to Docker Hub but this can be overwritten by -PpushImagesToDocker=true\n" +
                "   By default images will be tagged as 'latest' but this can be overwritten by -PuseJarVersionForDockerTag=true which will instead tag the image with the version of the jar."
            // Determine if we should push the images to Docker Hub
            pushImagesToDocker = Boolean.parseBoolean(pushImagesToDocker)
            // Determine if we should tag images with "latest" or with version of jar
            def tagToUse = Boolean.parseBoolean(useJarVersionForDockerTag) ? jar.version : "latest"
            push = pushImagesToDocker
            applicationName = dockerRepositoryPrefix + jar.baseName
            tagVersion = tagToUse
            dockerfile = file('src/main/docker/Dockerfile')
            project.group = 'vennetics'
            // Ensure that the jar and any keys are placed relative to the
            // docker build directory. See more on the docker content and
            // the ADD command here: http://docs.docker.com/engine/reference/builder/#add
            doFirst {
                // Define the path to the private key used to access the bell-sam-config
                // git repo. This validates that the file exists and if not it will fail
                // the build!!!
                def homePath = System.properties['user.home']
                def privateKey = homePath + '/.ssh/id_rsa.bell-sam-config'
                def logFile = "$rootProject.projectDir/core-logging-config/src/main/resources/log4j2.xml"
                assert file(privateKey).exists() 
                copy {
                    from jar
                    from privateKey
                    from logFile
                    into stageDir
                }
            }
        }
    }

    //*****************************************************************
    // Filter any resource files, replacing gradle property references
    // such as @baseName@.
    //*****************************************************************
    configure(allProcessResourcesTasks(project)) {
        filter(org.apache.tools.ant.filters.ReplaceTokens,
                tokens: [baseName: project.jar.baseName,
                         version: project.jar.version,
                         gradleVersion: project.gradle.gradleVersion]
        )
    }

    // See https://solidsoft.wordpress.com/2014/11/13/gradle-tricks-display-dependencies-for-all-subprojects-in-multi-project-build/
    // Check project dependencies by running task :project:allDeps e.g. gw :subx:allDeps
    task allDeps(type: DependencyReportTask) {}
}

//*********************************************************************
// Collect cql scripts, jmeter tests and gatling tests for release zip
//*********************************************************************
def cqlScripts() {
    subprojects.findAll { project ->
        new File("${project.projectDir}/src/main/resources/cassandraScripts").exists()
    }
}

def jmeterProjects() {
    subprojects.findAll { project ->
        new File("${project.projectDir}/src/test/jmeter").exists()
    }
}

def gatlingProjects() {
    subprojects.findAll { project ->
        new File("${project.projectDir}/src/test/scala").exists()
    }
}

//*********************************************************************
// Deliver the process resource tasks for a given project.
//*********************************************************************
def allProcessResourcesTasks(project) {
    project.sourceSets*.processResourcesTaskName.collect {
        project.tasks[it]
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersion
}

//*********************************************************************
// After the last task if its a build print all the MD5 checksums
//********************************************************************
gradle.taskGraph.afterTask { task ->
   if (task == gradle.taskGraph.getAllTasks().last() && task.getName().contains("build")) {
      FileTree tree = fileTree(rootProject.projectDir).include("**/*.MD5");
        tree.each {File file ->
          println "$file.name $file.text"
        }
   }
}
